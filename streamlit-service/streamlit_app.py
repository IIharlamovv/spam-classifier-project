import streamlit as st
import requests
import pandas as pd
import plotly.express as px

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Spam Classifier",
    page_icon="üìß",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìß Spam Message Classifier")
st.markdown("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é ML –º–æ–¥–µ–ª–∏")

# URL API (–±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è)
# API_URL = "http://localhost:8000"  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
API_URL = "http://spam-api:8000"  # –î–ª—è Docker

def predict_spam(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
    try:
        response = requests.post(f"{API_URL}/predict", json={"text": message})
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"API error: {response.status_code}"}
    except Exception as e:
        return {"error": f"Connection error: {str(e)}"}

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
tab1, tab2, tab3 = st.tabs(["üîç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä", "üìä –ê–Ω–∞–ª–∏–∑", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"])

with tab1:
    st.header("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Congratulations! You won a $1000 prize...",
        height=100
    )
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–ø–∞–º", type="primary"):
        if message.strip():
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ..."):
                result = predict_spam(message)
                
            if "error" not in result:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if result["is_spam"]:
                        st.error("üö® –°–ü–ê–ú")
                    else:
                        st.success("‚úÖ –ù–ï –°–ü–ê–ú")
                
                with col2:
                    st.metric(
                        label="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞", 
                        value=f"{result['spam_probability']:.2%}"
                    )
                
                with col3:
                    st.metric(
                        label="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ —Å–ø–∞–º–∞", 
                        value=f"{result['ham_probability']:.2%}"
                    )
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                fig = px.bar(
                    x=["–ù–µ —Å–ø–∞–º", "–°–ø–∞–º"],
                    y=[result["ham_probability"], result["spam_probability"]],
                    labels={"x": "–ö–ª–∞—Å—Å", "y": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"},
                    color=["–ù–µ —Å–ø–∞–º", "–°–ø–∞–º"],
                    color_discrete_map={"–ù–µ —Å–ø–∞–º": "green", "–°–ø–∞–º": "red"}
                )
                fig.update_layout(showlegend=False)
                st.plotly_chart(fig, use_container_width=True)
                
            else:
                st.error(f"–û—à–∏–±–∫–∞: {result['error']}")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")

with tab2:
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑")
    
    # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    st.subheader("–¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã")
    
    test_messages = [
        "Free entry in 2 a wkly comp to win FA Cup final tkts",
        "Hey, are we still meeting for lunch tomorrow?",
        "Congratulations! You've won a $1000 gift card. Click here to claim.",
        "Ok, see you later then",
        "URGENT: Your bank account has been suspended. Verify your details now."
    ]
    
    results = []
    for msg in test_messages:
        result = predict_spam(msg)
        if "error" not in result:
            results.append({
                "–°–æ–æ–±—â–µ–Ω–∏–µ": msg[:50] + "..." if len(msg) > 50 else msg,
                "–†–µ–∑—É–ª—å—Ç–∞—Ç": "–°–ø–∞–º" if result["is_spam"] else "–ù–µ —Å–ø–∞–º",
                "–í–µ—Ä. —Å–ø–∞–º–∞": f"{result['spam_probability']:.2%}",
                "–í–µ—Ä. –Ω–µ —Å–ø–∞–º–∞": f"{result['ham_probability']:.2%}"
            })
    
    if results:
        df = pd.DataFrame(results)
        st.dataframe(df, use_container_width=True)

with tab3:
    st.header("–û –ø—Ä–æ–µ–∫—Ç–µ")
    
    st.markdown("""
    ### Spam Classification Project
    
    –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–ø–∞–º –∏ –Ω–µ —Å–ø–∞–º.
    
    **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
    - FastAPI –¥–ª—è REST API
    - Streamlit –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    - Scikit-learn –¥–ª—è ML –º–æ–¥–µ–ª–∏
    - Docker –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏
    
    **–ú–æ–¥–µ–ª—å:**
    - –ê–ª–≥–æ—Ä–∏—Ç–º: SVC
    - –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: TF-IDF
    - –¢–æ—á–Ω–æ—Å—Ç—å: >98%
    
    **API endpoints:**
    - `POST /predict` - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    - `GET /health` - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("Spam Classifier Project ¬© 2025")